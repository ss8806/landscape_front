import AppLayout from "../../components/Layouts/AppLayout";
import Thumb from "../../components/Thumb";
import { SyntheticEvent, useEffect, useState } from "react";
import axios from "../../lib/axios";
import type { Category } from "../../types/Category";
import { useAuth } from "../../hooks/auth";
import * as Yup from "yup";
import {
  useFormik,
  withFormik,
  FormikProps,
  FormikErrors,
  Form,
  Field,
} from "formik";

type ThumbProps = {
  file: File | null;
};

type Article = {
  id: number;
  title: string;
  body: string;
  user_id: any;
  category_id: any;
  pic1: any;
};

const CreateArticles = () => {
  const { user } = useAuth({ middleware: "auth" });

  const formik = useFormik({
    initialValues: {
      title: "",
      body: "",
      category_id: "",
      pic1: "",
      file: null,
    },
    validationSchema: Yup.object({
      title: Yup.string()
        .max(15, "Must be 15 characters or less")
        .required("Required"),
      body: Yup.string()
        .max(20, "Must be 20 characters or less")
        .required("Required"),
      category_id: Yup.string().max(1).required("Required"),
      pic1: Yup.string().required("Required"),
    }),
    onSubmit: (values) => {
      alert(JSON.stringify(values, null, 2));
    },
  });
  const [articles, setArticles] = useState<Article[]>([
    {
      id: 0,
      title: "",
      body: "",
      user_id: "",
      category_id: "",
      pic1: "",
    },
  ]);

  const [title, setTitle] = useState<string>("");
  const [body, setBody] = useState<string>("");
  const [user_id, setUser_id] = useState<any>("");
  const [category_id, setCategory_id] = useState<any>("");
  let [pic1, setPic1] = useState<any>("");

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTitle(e.target.value);
  };

  const handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setBody(e.target.value);
  };

  const [selectedOption, setSelectedOption]: any = useState(null);

  const handleCategoryChange = (e: React.ChangeEvent<any>) => {
    setSelectedOption(e.target.value);
  };

  const [categories, setCategories] = useState<any>([
    {
      id: 0,
      name: "",
      c_id: 0,
    },
  ]);

  useEffect(() => {
    axios
      .get("http://localhost:/api/article/create/")
      .then((response) => setCategories(response.data))
      .catch((error) => console.log(error));
  }, []);

  const imageHander = (event: any) => {
    if (event.target.files === null) {
      return;
    }
    const file = event.target.files[0];
    if (file === null) {
      return;
    }
    let imgTag = document.getElementById("preview") as HTMLImageElement;
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result: string = reader.result as string;
      // result.replace(/data:.*\/.*;base64,/, "");
      imgTag.src = result;
      //   pic1 = result.replace(/data:.*\/.*;base64,/, "");
      pic1 = result;
      //   console.log(pic1);
    };
  };

  const createNewarticle = (): void => {
    axios
      .post("http://localhost:/api/article/store", {
        title: title,
        body: body,
        user_id: user.id,
        category_id: selectedOption,
        pic1: pic1,
      })
      .then((response) => {
        setArticles([...articles, response.data]);
      })
      .then(() => {
        setTitle("");
        setBody("");
        setUser_id("");
        setCategory_id("");
      })
      .catch((error) => {
        console.log(error);
      });
  };

  return (
    <>
      <AppLayout>
        <section className="min-h-screen bg-yellow-400 py-20">
          <div className="container mx-auto p-12 bg-gray-100 rounded-xl">
            <div className="text-center">
              <form onSubmit={formik.handleSubmit}>
                <label htmlFor="inputTitle">タイトル</label>
                <input
                  id="inputTitle"
                  type="text"
                  name="title"
                  className="w-3/4 mt-1 mb-1 block mx-auto"
                  placeholder="タイトル"
                  value={formik.values.title}
                  required
                  onChange={formik.handleChange}
                />
                {formik.touched.title && formik.errors.title ? (
                  <div className="text-red-500">{formik.errors.title}</div>
                ) : null}

                <label htmlFor="inputTitle">カテゴリー</label>
                <select
                  id="inputTitle"
                  name="category_id"
                  className="w-3/4 mt-1 mb-1 block mx-auto"
                  required
                  defaultValue={selectedOption}
                  onChange={handleCategoryChange}
                >
                  <option value="" className="hidden">
                    選択してください
                  </option>
                  {categories.map((category: any) => {
                    return (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    );
                  })}
                </select>

                <label htmlFor="inputBody">画像</label>
                <section className="text-center">
                  <div>
                    {pic1 || (
                      <img
                        id="preview"
                        className="d-block mx-auto h-60 h-56"
                        src={`${process.env.PUBLIC_URL}/landscape.svg`}
                      />
                    )}
                  </div>
                  <input
                    name="pic1"
                    type="file"
                    className="m-auto"
                    accept="image/*"
                    onChange={formik.handleChange}
                    // onChange={imageHander}
                  />
                </section>
                <label htmlFor="inputBody">本文</label>
                <textarea
                  id="inputBody"
                  name="body"
                  className="w-3/4 h-64 mt-1 mb-1 block mx-auto"
                  placeholder="本文"
                  value={body}
                  required
                  onChange={handleBodyChange}
                />
                <button onClick={createNewarticle}>作成</button>
              </form>
            </div>
          </div>
        </section>
      </AppLayout>
    </>
  );
};
export default CreateArticles;
